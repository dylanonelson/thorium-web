:root {
  /* Borrowed from Thorium src/renderer/assets/styles/variable.scss */
  --color-primary: #4d4d4d;
  --color-secondary: white;
  --color-disabled: #767676;
  --color-subdued: #999999;
  --color-hover: #eaeaea;
  --color-selected: #eaeaea;
}

html,
body {
  min-height: 100%;
  overflow: hidden;
  touch-action: pan-x pan-y;
  overscroll-behavior-x: none;
  overscroll-behavior-y: none;
}

body {
  margin: 0;
  background-color: #FFFFFF;
}

#bottom-bar,
#top-bar {
  box-sizing: border-box;
  gap: 2px;
  touch-action: manipulation;
  background-color: #FFFFFF;
}

/* Necessary to have all three so that there is no offset when switching paginated/scroll */
#top-bar {
  min-height: calc(var(--icon-size, 24px) * 2.5);
  height: calc(var(--icon-size, 24px) * 2.5);
  max-height: calc(var(--icon-size, 24px) * 2.5);
}

#bottom-bar {
  height: calc(var(--icon-size, 24px) * 2.5);
  display: flex;
  justify-content: center;
  align-items: center;
}

main {
  display: flex;
  flex-direction: column;
  height: 100vh;
  height: 100dvh;
}

#wrapper {
  height: 100%;
  margin: 0;
}

#container {
  contain: content;
  width: 100%;
  height: 100%;
  margin: 0 auto;
}

.readium-navigator-iframe {
  width: 100%;
  height: 100%;
  border-width: 0;
}

/* Loading spinner for resources */
@keyframes loading {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

div:has(> .readium-navigator-iframe.blank)::after {
  content: "";
  position: absolute;
  top: 50%;
  left: 50%;
  margin-top: -30px;
  margin-left: -30px;
  width: 50px;
  height: 50px;
  border-radius: 50px;
  border: 5px solid grey;
  border-top-color: black;
  animation: loading 2s linear infinite;
}

button {
  -webkit-appearance: none;
  appearance: none;
  border-radius: 0;
  text-align: inherit;
  background: none;
  box-shadow: none;
  padding: 0;
  cursor: pointer;
  border: none;
  color: inherit;
  font: inherit;

  /* Focus no outline */
  outline: none;
}

/* These styles are here because the svg selector, which rotates the disclosure icon, must be global in scope.
    This is because the react-aria-Tree component is rendered in a shadow root, and the styles must be global to
    affect the shadow root. There may be a better way to handle it but I have not found one yet. */
.react-aria-Tree {

  display: flex;
  flex-direction: column;
  gap: 2px;
  overflow: auto;
  padding: 4px;
  border: 1px solid var(--border-color);
  border-radius: 6px;
  background: var(--overlay-background);
  forced-color-adjust: none;
  outline: none;
  width: 100%;
  max-height: 300px;
  box-sizing: border-box;

  &[data-focus-visible] {
    outline: 2px solid var(--focus-ring-color);
    outline-offset: -1px;
  }

  .react-aria-TreeItem {
    display: flex;
    align-items: center;
    gap: 0.571rem;
    min-height: 28px;
    padding: 0.286rem 0.286rem 0.286rem 0.571rem;
    --padding: 20px;
    padding-left: calc(
      (var(--tree-item-level) - 1) * 20px + 0.571rem + var(--padding)
    );
    border-radius: 6px;
    outline: none;
    cursor: default;
    color: var(--text-color);
    font-size: 1.072rem;
    position: relative;
    transform: translateZ(0);

    &[data-has-child-rows] {
      --padding: 0px;
    }

    .react-aria-Button[slot="chevron"] {
      all: unset;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 1.143rem;
      height: 1.143rem;

      svg {
        rotate: 0deg;
        transition: rotate 200ms;
        width: 12px;
        height: 12px;
        fill: none;
        stroke: currentColor;
        stroke-width: 3px;
      }
    }

    &[data-expanded] .react-aria-Button[slot="chevron"] svg {
      rotate: 90deg;
    }

    &[data-focus-visible] {
      outline: 2px solid var(--focus-ring-color);
      outline-offset: -2px;
    }

    &[data-pressed] {
      background: var(--gray-100);
    }

    &[data-selected] {
      background: var(--highlight-background);
      color: var(--highlight-foreground);
      --focus-ring-color: var(--highlight-foreground);

      &[data-focus-visible] {
        outline-color: var(--highlight-foreground);
        outline-offset: -4px;
      }

      .react-aria-Button {
        color: var(--highlight-foreground);
        --highlight-hover: rgb(255 255 255 / 0.1);
        --highlight-pressed: rgb(255 255 255 / 0.2);
      }
    }

    &[data-disabled] {
      color: var(--text-color-disabled);
    }

    .react-aria-Button:not([slot]) {
      margin-left: auto;
      background: transparent;
      border: none;
      font-size: 1.2rem;
      line-height: 1.2em;
      padding: 0.286rem 0.429rem;
      transition: background 200ms;

      &[data-hovered] {
        background: var(--highlight-hover);
      }

      &[data-pressed] {
        background: var(--highlight-pressed);
        box-shadow: none;
      }
    }
  }

  /* join selected items if :has selector is supported */
  @supports selector(:has(.foo)) {
    gap: 0;

    .react-aria-TreeItem[data-selected]:has(+ [data-selected]) {
      border-end-start-radius: 0;
      border-end-end-radius: 0;
    }

    .react-aria-TreeItem[data-selected] + [data-selected] {
      border-start-start-radius: 0;
      border-start-end-radius: 0;
    }
  }

  :where(.react-aria-TreeItem) .react-aria-Checkbox {
    --selected-color: var(--highlight-foreground);
    --selected-color-pressed: var(--highlight-foreground-pressed);
    --checkmark-color: var(--highlight-background);
    --background-color: var(--highlight-background);
  }
}